//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scenes/Scripts/InputSystem/GameInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GameInputs : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GameInputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameInputs"",
    ""maps"": [
        {
            ""name"": ""Commands"",
            ""id"": ""1583c8a9-41d5-4b2a-a6a6-1197471002e1"",
            ""actions"": [
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""e6356d90-ce12-44ca-95a4-96c47de8836c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SlowDown"",
                    ""type"": ""Button"",
                    ""id"": ""fdbe2410-3c6e-4718-8ec8-b32f3347f52d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SpeedUp"",
                    ""type"": ""Button"",
                    ""id"": ""6367f38d-5f3a-41c5-a081-3fb9d2ab808b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Stop"",
                    ""type"": ""Button"",
                    ""id"": ""4eba74fa-7252-4f92-b06d-80c78a50be5b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Turn"",
                    ""type"": ""Button"",
                    ""id"": ""156419d4-413c-4260-a1cf-4bf77f42c934"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UseItems"",
                    ""type"": ""Button"",
                    ""id"": ""f181b196-62d9-4be8-b3de-0cf793ff00b4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ea455882-b644-4dca-9da1-7a5649552c48"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""418c0c4c-4d4a-4cf9-8597-23604e413dc3"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SlowDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5af1e1f7-4908-45dd-8cb3-ee66c763da53"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SpeedUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8751c7b6-2204-4d16-8b90-72f466c08a4a"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Stop"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bd94d505-7998-48d5-91bc-286af909b4a8"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Turn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b574a980-2e14-45ba-b48e-5bf1eb36575e"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UseItems"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Commands
        m_Commands = asset.FindActionMap("Commands", throwIfNotFound: true);
        m_Commands_Jump = m_Commands.FindAction("Jump", throwIfNotFound: true);
        m_Commands_SlowDown = m_Commands.FindAction("SlowDown", throwIfNotFound: true);
        m_Commands_SpeedUp = m_Commands.FindAction("SpeedUp", throwIfNotFound: true);
        m_Commands_Stop = m_Commands.FindAction("Stop", throwIfNotFound: true);
        m_Commands_Turn = m_Commands.FindAction("Turn", throwIfNotFound: true);
        m_Commands_UseItems = m_Commands.FindAction("UseItems", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Commands
    private readonly InputActionMap m_Commands;
    private ICommandsActions m_CommandsActionsCallbackInterface;
    private readonly InputAction m_Commands_Jump;
    private readonly InputAction m_Commands_SlowDown;
    private readonly InputAction m_Commands_SpeedUp;
    private readonly InputAction m_Commands_Stop;
    private readonly InputAction m_Commands_Turn;
    private readonly InputAction m_Commands_UseItems;
    public struct CommandsActions
    {
        private @GameInputs m_Wrapper;
        public CommandsActions(@GameInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Jump => m_Wrapper.m_Commands_Jump;
        public InputAction @SlowDown => m_Wrapper.m_Commands_SlowDown;
        public InputAction @SpeedUp => m_Wrapper.m_Commands_SpeedUp;
        public InputAction @Stop => m_Wrapper.m_Commands_Stop;
        public InputAction @Turn => m_Wrapper.m_Commands_Turn;
        public InputAction @UseItems => m_Wrapper.m_Commands_UseItems;
        public InputActionMap Get() { return m_Wrapper.m_Commands; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CommandsActions set) { return set.Get(); }
        public void SetCallbacks(ICommandsActions instance)
        {
            if (m_Wrapper.m_CommandsActionsCallbackInterface != null)
            {
                @Jump.started -= m_Wrapper.m_CommandsActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_CommandsActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_CommandsActionsCallbackInterface.OnJump;
                @SlowDown.started -= m_Wrapper.m_CommandsActionsCallbackInterface.OnSlowDown;
                @SlowDown.performed -= m_Wrapper.m_CommandsActionsCallbackInterface.OnSlowDown;
                @SlowDown.canceled -= m_Wrapper.m_CommandsActionsCallbackInterface.OnSlowDown;
                @SpeedUp.started -= m_Wrapper.m_CommandsActionsCallbackInterface.OnSpeedUp;
                @SpeedUp.performed -= m_Wrapper.m_CommandsActionsCallbackInterface.OnSpeedUp;
                @SpeedUp.canceled -= m_Wrapper.m_CommandsActionsCallbackInterface.OnSpeedUp;
                @Stop.started -= m_Wrapper.m_CommandsActionsCallbackInterface.OnStop;
                @Stop.performed -= m_Wrapper.m_CommandsActionsCallbackInterface.OnStop;
                @Stop.canceled -= m_Wrapper.m_CommandsActionsCallbackInterface.OnStop;
                @Turn.started -= m_Wrapper.m_CommandsActionsCallbackInterface.OnTurn;
                @Turn.performed -= m_Wrapper.m_CommandsActionsCallbackInterface.OnTurn;
                @Turn.canceled -= m_Wrapper.m_CommandsActionsCallbackInterface.OnTurn;
                @UseItems.started -= m_Wrapper.m_CommandsActionsCallbackInterface.OnUseItems;
                @UseItems.performed -= m_Wrapper.m_CommandsActionsCallbackInterface.OnUseItems;
                @UseItems.canceled -= m_Wrapper.m_CommandsActionsCallbackInterface.OnUseItems;
            }
            m_Wrapper.m_CommandsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @SlowDown.started += instance.OnSlowDown;
                @SlowDown.performed += instance.OnSlowDown;
                @SlowDown.canceled += instance.OnSlowDown;
                @SpeedUp.started += instance.OnSpeedUp;
                @SpeedUp.performed += instance.OnSpeedUp;
                @SpeedUp.canceled += instance.OnSpeedUp;
                @Stop.started += instance.OnStop;
                @Stop.performed += instance.OnStop;
                @Stop.canceled += instance.OnStop;
                @Turn.started += instance.OnTurn;
                @Turn.performed += instance.OnTurn;
                @Turn.canceled += instance.OnTurn;
                @UseItems.started += instance.OnUseItems;
                @UseItems.performed += instance.OnUseItems;
                @UseItems.canceled += instance.OnUseItems;
            }
        }
    }
    public CommandsActions @Commands => new CommandsActions(this);
    public interface ICommandsActions
    {
        void OnJump(InputAction.CallbackContext context);
        void OnSlowDown(InputAction.CallbackContext context);
        void OnSpeedUp(InputAction.CallbackContext context);
        void OnStop(InputAction.CallbackContext context);
        void OnTurn(InputAction.CallbackContext context);
        void OnUseItems(InputAction.CallbackContext context);
    }
}
